"use strict";(self.webpackChunktest_website=self.webpackChunktest_website||[]).push([[2563],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(n),f=r,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||l;return n?i.createElement(m,o(o({ref:t},p),{},{components:n})):i.createElement(m,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var c=2;c<l;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},717:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const l={sidebar_position:0,title:"Listening for Events"},o="Listening for Events",a={unversionedId:"firebolt/docs/listening-for-events",id:"version-0.7.0/firebolt/docs/listening-for-events",title:"Listening for Events",description:"Events are a common pattern for asynchronous notifications from an SDK.",source:"@site/versioned_docs/version-0.7.0/firebolt/docs/listening-for-events.md",sourceDirName:"firebolt/docs",slug:"/firebolt/docs/listening-for-events",permalink:"/docs/0.7.0/firebolt/docs/listening-for-events",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-0.7.0/firebolt/docs/listening-for-events.md",tags:[],version:"0.7.0",sidebarPosition:0,frontMatter:{sidebar_position:0,title:"Listening for Events"},sidebar:"tutorialSidebar",previous:{title:"Email Prefill",permalink:"/docs/0.7.0/firebolt/docs/email-prefill"},next:{title:"Listening for Property Changes",permalink:"/docs/0.7.0/firebolt/docs/listening-for-property-changes"}},s={},c=[{value:"Listening for Events",id:"listening-for-events-1",level:2},{value:"Listening for a specific event",id:"listening-for-a-specific-event",level:3},{value:"Listening for all events in a Module",id:"listening-for-all-events-in-a-module",level:3},{value:"Listening for an event just once",id:"listening-for-an-event-just-once",level:2},{value:"Clearing listeners",id:"clearing-listeners",level:2},{value:"Clearing a single listener",id:"clearing-a-single-listener",level:3},{value:"Clearing all listeners in a module",id:"clearing-all-listeners-in-a-module",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"listening-for-events"},"Listening for Events"),(0,r.kt)("p",null,"Events are a common pattern for asynchronous notifications from an SDK."),(0,r.kt)("p",null,"Firebolt provides three methods for interacting with Firebolt events:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"listen")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"once")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"clear"))),(0,r.kt)("h2",{id:"listening-for-events-1"},"Listening for Events"),(0,r.kt)("p",null,"In order to listen for an event, you need to know which Firebolt module it is part of."),(0,r.kt)("p",null,"For example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"foreground")," event is part of the Firebolt ",(0,r.kt)("inlineCode",{parentName:"p"},"Lifecycle")," module."),(0,r.kt)("p",null,"Once you've identified which module, there are two ways to listen:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"listen for ",(0,r.kt)("strong",{parentName:"li"},"every event")," in the module"),(0,r.kt)("li",{parentName:"ul"},"listen for a specific event in the module")),(0,r.kt)("h3",{id:"listening-for-a-specific-event"},"Listening for a specific event"),(0,r.kt)("p",null,"To listen to ",(0,r.kt)("strong",{parentName:"p"},"just the ",(0,r.kt)("inlineCode",{parentName:"strong"},"foreground")," event"),", you'd use the ",(0,r.kt)("inlineCode",{parentName:"p"},"listen")," method that is part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Lifecycle")," module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"Lifecycle.listen('foreground', () => { })    \n")),(0,r.kt)("p",null,"The first parameter is the name of the event you are listening for. The second parameter is a callback function that the platform will call to inform you that this event has occurred."),(0,r.kt)("p",null,"Ideally your callback would be more interesting than the example above. Generally the callback will take the event's payload object, which has important context about each instance of an event, and do ",(0,r.kt)("em",{parentName:"p"},"something")," with it."),(0,r.kt)("p",null,"To make this slightly more interesting:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"Lifecycle.listen('foreground', (value) => {\n    if (value.previous === 'inactive') {\n        console.log('Our app has transitioned from inactive to foreground!')\n    }\n})\n")),(0,r.kt)("h3",{id:"listening-for-all-events-in-a-module"},"Listening for all events in a Module"),(0,r.kt)("p",null,"To listen to all events in a module, say the ",(0,r.kt)("inlineCode",{parentName:"p"},"Lifecycle")," module, you'd use the listen method with only one parameter, the callback:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"Lifecycle.listen((event, value) => {\n    console.log(event) // this will be the string representation of the lifecycle state we just entered\n    if (value.previous === 'inactive') {\n        console.log('Our app has transitioned from inactive to foreground!')\n    }\n})\n")),(0,r.kt)("p",null,"Note that in this case, your callback method must take two parameters: the name of the event being received and the payload value of the event."),(0,r.kt)("h2",{id:"listening-for-an-event-just-once"},"Listening for an event just once"),(0,r.kt)("p",null,"Sometimes your app only wants to be notified of the ",(0,r.kt)("em",{parentName:"p"},"very next instance")," of an event."),(0,r.kt)("p",null,"In this case, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"once")," method, which as the same signature as ",(0,r.kt)("inlineCode",{parentName:"p"},"listen"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"Lifecycle.once('foreground', (value) => {\n    if (value.previous === 'inactive') {\n        console.log('Our app has transitioned from inactive to foreground!')\n    }\n})\n\nLifecycle.once((event, value) => {\n    console.log(event) // this will be the string representation of the lifecycle state we just entered\n    if (value.previous === 'inactive') {\n        console.log('Our app has transitioned from inactive to foreground!')\n    }\n})\n")),(0,r.kt)("p",null,"Each of those ",(0,r.kt)("inlineCode",{parentName:"p"},"once")," calls results in zero or one calls to your callback, when a matching event occurs. Future events will not be sent to those callbacks."),(0,r.kt)("h2",{id:"clearing-listeners"},"Clearing listeners"),(0,r.kt)("p",null,"Modules that have the ",(0,r.kt)("inlineCode",{parentName:"p"},"listen")," method also have a ",(0,r.kt)("inlineCode",{parentName:"p"},"clear")," method. This allows you to clear out all of the listeners for the entire module, or just a single listener."),(0,r.kt)("h3",{id:"clearing-a-single-listener"},"Clearing a single listener"),(0,r.kt)("p",null,"In order to clear a single listener, your app needs to keep track of the listener ID for the initiating ",(0,r.kt)("inlineCode",{parentName:"p"},"listen")," call."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"listen")," method returns a Promise that resolves to an integer for this purpose:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// let's log \"Hello World!\" whenever our app moves into the foreground\nconst helloListenerId = await Lifecycle.listen('foreground', () => { console.log(\"Hello World!\")})\n\n// but let's stop doing that when our app is unloading\nLifecycle.listen('unloading', () => {\n    Lifecycle.clear(helloListenerId)\n})\n")),(0,r.kt)("h3",{id:"clearing-all-listeners-in-a-module"},"Clearing all listeners in a module"),(0,r.kt)("p",null,"In order to clear all of the listeners added a specific module, simply call ",(0,r.kt)("inlineCode",{parentName:"p"},"clear()")," with no parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"Lifecycle.clear()\n")))}u.isMDXComponent=!0}}]);